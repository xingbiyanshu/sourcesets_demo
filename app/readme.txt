项目SourceSetsDemo中有3个风味：full,keda,demo。其中demo风味版本的app登录成功后会跳转到A界面，full风味的和keda风味的都是跳转到C界面，为了适应这种差异化，并且又拒绝使用在代码中走“if/else”分支的方式（此种方式破坏了代码结构，让代码难于理解，并且随着风味的增多分支也会增多，代码将会不可控），我们尝试使用gradle的“源集”功能，针对不同的风味（实际上可以更细――构建变体(variants)=风味(flavors)*构建类型(buildtypes)）创建了不同的源集。
其中main源集是公共源集，其中放置着所有源集公共的部分（此描述不准确，因为特定源集会覆盖公共源集中同路径同名的内容），flavor对应的源集则放置flavor特定的内容，在我们项目中flavor特定的内容就是登录成功后跳转到不同界面，所以flavor源集中我们放置了AccessoryIntentDispatcher辅助跳转类以及目标界面XActivity。但是仔细考察发现，这样做后full源集和keda源集的内容完全一样――它们都是跳转到C界面，只有demo源集不同――它跳转到A界面。想象一下如果有更多的源集加入full和keda的阵营，那就会存在大量的重复代码需要维护，对C界面所做的更改必须在所有这些源集中同步，这会是噩梦。可不可以将full源集和keda源集中的内容下放到公共源集main中，然后编demo源集时gradle替我们去自动解析并覆盖掉通用源集main中的同名文件呢？res文件是可以的，然而java等源文件，到目前为止，却不行，编译会报错。如何解决这个矛盾呢？
在main源集和各个flavor源集之间再加一层，取名为first_level_common_stuff（取如此长的名字以区别于flavor源集，也避免将来可能的flavor名字与此冲突。此源集并非flavor源集而是我们自己抽取的一个公用源集，如果将来需要在first_level_common_stuff中再做区分则可抽取出second_level_common_stuff），该层包含在full和keda中相同，但是在demo中又需要覆盖的部分，相当于从原来的full和keda源集中提取公因式到first_level_common_stuff源集中，提取后的结构如下：
flavor.name=demo
java.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\demo\java
res.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\demo\res
manifest.path=G:\projects\android\_lab\SourceSetsDemo\app\src\demo\AndroidManifest.xml
flavor.name=full
java.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\full\java
java.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\first_level_common_stuff\java
res.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\full\res
res.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\first_level_common_stuff\res
manifest.path=G:\projects\android\_lab\SourceSetsDemo\app\src\first_level_common_stuff\AndroidManifest.xml
flavor.name=keda
java.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\keda\java
java.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\first_level_common_stuff\java
res.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\keda\res
res.srcDir.path=G:\projects\android\_lab\SourceSetsDemo\app\src\first_level_common_stuff\res
manifest.path=G:\projects\android\_lab\SourceSetsDemo\app\src\first_level_common_stuff\AndroidManifest.xml
上面是在gradle中调用相关接口打印出的结果，实际上我们并没有创建full和keda目录，只创建了first_level_common_stuff目录，不过这并不会影响使用。
